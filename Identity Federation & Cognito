Identity Federation & Cognito
Introduction to Identity Federation in AWS

The concept of Identity Federation in AWS enables users who exist outside of AWS permissions to access AWS resources within your accounts. Since these users already exist within your corporate directory, it is preferable not to create specific IAM users for them. Instead, user management is handled outside of AWS, which is the primary reason for implementing Identity Federation.
Use Cases for Identity Federation

    Your corporation maintains its own identity system, such as Active Directory.
    You have web and mobile applications that require access to AWS resources.

In these scenarios, Identity Federation becomes essential.
Core Workflow of Identity Federation

The user attempts to access AWS resources, and an identity provider (IdP) is involved. A trust relationship must be established between AWS and the identity provider to authorize AWS to accept identities from that provider. The user logs into the identity provider, receives temporary AWS credentials, and accesses AWS resources using these credentials.
Flavors of Identity Federation

Identity Federation can be implemented in several ways:

    SAML 2.0 Federation
    Custom Identity Broker
    Web Identity Federation (with or without Amazon Cognito)
    IAM Identity Center (covered in a separate lecture)

This lecture focuses on the first three methods.
SAML 2.0 Federation

SAML 2.0 (Security Assertion Markup Language) is an open standard used by many identity providers such as ADFS. It supports integration with Microsoft Active Directory or any SAML 2.0-compatible identity provider with AWS. This method allows access to the AWS console, CLI, or APIs using temporary credentials without creating IAM users for each employee.

A trust relationship must be established between IAM and your SAML 2.0 identity providers in both directions.

Under the hood, AWS uses the AssumeRoleWithSAML API from the STS service to provide temporary credentials based on the SAML assertion.
Understanding the SAML 2.0 Federation Flow

    The user authenticates with the corporate identity provider.
    The identity provider verifies the user against an identity store (e.g., LDAP).
    Upon successful login, the identity provider returns a SAML assertion as proof of identity.
    The user calls the STS service with the AssumeRoleWithSAML API, presenting the SAML assertion.
    STS verifies the assertion and returns temporary security credentials.
    The user accesses AWS APIs using these credentials.

This flow is similar when accessing the AWS Management Console, where the user is redirected to a sign-in URL generated by AWS after SAML authentication.
Integration with Microsoft Active Directory Federation Services (ADFS)

When using ADFS, the mechanism remains the same. The identity provider is ADFS, and the directory service is Active Directory. This distinction clarifies the roles of the identity provider and the directory itself.
Custom Identity Broker

If your identity provider is not compatible with SAML 2.0, a custom identity broker is necessary. In this setup:

    The user logs into the custom identity broker.
    The broker authenticates the user and requests temporary credentials from AWS STS directly.
    The broker must determine the appropriate IAM role for the user.
    The broker uses the AssumeRole or GetFederationToken API from STS to obtain temporary credentials.
    These credentials are passed to the user, who can then access AWS APIs or the management console.

This approach places user management responsibility on the identity broker.
Web Identity Federation

Web Identity Federation allows clients in an untrusted environment to access AWS resources by authenticating with a third-party identity provider such as Amazon, Google, Facebook, or any OpenID Connect-compatible provider.

The flow is:

    The client logs into the third-party identity provider and receives a web identity token.
    The client calls the STS API AssumeRoleWithWebIdentity with this token.
    STS returns temporary security credentials.
    The client uses these credentials to access AWS resources directly.

AWS recommends using Amazon Cognito for Web Identity Federation due to enhanced security and simplicity.
Amazon Cognito Integration

Amazon Cognito acts as a token vending machine, exchanging tokens for AWS credentials. The flow with Cognito is:

    The client authenticates with a third-party identity provider and obtains a token.
    The token is exchanged with Amazon Cognito, which returns a Cognito token.
    The Cognito token is exchanged with STS to receive temporary AWS credentials.
    The client accesses AWS resources using these credentials.

Benefits of using Cognito include support for anonymous users, multi-factor authentication (MFA), and data synchronization.
Restricting IAM Policies with Web Identity Federation

IAM policies can be restricted using policy variables when employing Web Identity Federation. For example, a policy can allow a user to list and manipulate objects in an S3 bucket only within a prefix corresponding to their user ID.

Special IAM policy variables include:

    identity.amazon.com:sub
    amazon.com:user_id

These variables enable fine-grained access control to ensure users have only the permissions they require.
Conclusion

Identity Federation provides mechanisms to allow external users to access AWS resources securely without creating individual IAM users. While older methods like SAML 2.0 Federation and custom identity brokers are still relevant, Amazon Cognito and IAM Identity Center represent more modern and streamlined approaches. Future lectures will cover Single Sign-On (SSO) in more detail.

It is recommended to revisit this lecture before exams to solidify understanding.
Key Takeaways

    Identity Federation allows users outside AWS to access AWS resources without creating IAM users.
    SAML 2.0 Federation integrates corporate identity providers like Active Directory with AWS using temporary credentials.
    Custom identity brokers manage authentication and temporary credentials when IDPs are not SAML 2.0 compatible.
    Web Identity Federation with Amazon Cognito provides a secure, simple way to authenticate users via third-party IDPs and manage AWS access with fine-grained IAM policies.
